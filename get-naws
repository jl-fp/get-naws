#!/bin/bash

NODE_VERSION="v18.17.1"
INSTALL_DIR="$HOME/.naws"
NODE_DIR="$INSTALL_DIR/node-$NODE_VERSION"
NODE_BIN="$NODE_DIR/bin/node"
NPM_BIN="$NODE_DIR/bin/npm"
NAWS_BIN="$NODE_DIR/bin/naws"
NAWS_SCOPE="@ffa"
NAWS_REGISTRY="https://artifactory.flexport.io/artifactory/api/npm/ffa-infra-npm-dev-local"
NAWS_PACKAGE_NAME="@ffa/naws-cli"
NAWS_WRAPPER="/usr/local/bin/naws"

NODE_DOWNLOAD_URL="https://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION-$PLATFORM-$ARCH.tar.gz"
TEMP_FILE="$INSTALL_DIR/node-$NODE_VERSION.tar.gz"



# Check if running as root (sudo)
if [ "$EUID" -ne 0 ]; then
    echo "This script requires sudo privileges to install commands globally."
    exit 1
fi

# Create installation directory if it doesn't exist
mkdir -p "$INSTALL_DIR"

# Check if Node.js is already installed
if [ ! -f "$NODE_BIN" ]; then

  echo "naws not found. Installing..."
  
  # Determine platform and architecture
  PLATFORM="$(uname -s | tr '[:upper:]' '[:lower:]')"
  ARCH="$(uname -m)"
  
  # Map architecture to Node.js naming convention
  case "$ARCH" in
    x86_64)
      ARCH="x64"
      ;;
    aarch64|arm64)
      ARCH="arm64"
      ;;
    *)
      echo "Unsupported architecture: $ARCH"
      exit 1
      ;;
  esac
  
  echo "Downloading from $NODE_DOWNLOAD_URL"
  curl -L "$NODE_DOWNLOAD_URL" -o "$TEMP_FILE"
  
  if [ $? -ne 0 ]; then
    echo "Failed to download Node.js"
    exit 1
  fi
  
  # Extract Node.js
  echo "Extracting Node.js..."
  tar -xzf "$TEMP_FILE" -C "$INSTALL_DIR"
  
  if [ $? -ne 0 ]; then
    echo "Failed to extract Node.js"
    exit 1
  fi
  
  # Rename the extracted directory to our standard name
  mv "$INSTALL_DIR/node-$NODE_VERSION-$PLATFORM-$ARCH" "$NODE_DIR"
  
  # Clean up
  rm "$TEMP_FILE"
  
  echo "Node.js $NODE_VERSION installed successfully"
else
  echo "Node.js is already installed"
  echo "Current Node.js version is $($NODE_BIN --version)"
fi

echo "Installing $NAWS_PACKAGE_NAME..."


"$NPM_BIN" --prefix $NODE_DIR config set $NAWS_SCOPE:registry $NAWS_REGISTRY
"$NPM_BIN" --prefix $NODE_DIR install -g $NAWS_PACKAGE_NAME

# # Also check if naws exists in PATH and remove it
# if command -v naws &> /dev/null; then
#     EXISTING_NAWS=$(which naws)
#     if [ -f "$EXISTING_NAWS" ]; then
#         echo "Removing existing naws at: $EXISTING_NAWS"
#         rm -f "$EXISTING_NAWS"
#     fi
# fi

# Create wrapper script for naws with experimental specifier resolution

# Remove any existing naws command installations
echo "Removing any existing naws installations..."

rm -rf $NAWS_WRAPPER

echo "Creating naws wrapper script..."
cat > "$NAWS_WRAPPER" << EOF
#!/bin/bash
exec "$NODE_BIN" --experimental-specifier-resolution=node "$NAWS_BIN" "\$@"
EOF

chmod +x "$NAWS_WRAPPER"

echo "$NAWS_PACKAGE_NAME $($NAWS_WRAPPER --version) installed"

echo "You can now run 'naws' in your terminal."
echo "To update naws, run 'get-naws'"